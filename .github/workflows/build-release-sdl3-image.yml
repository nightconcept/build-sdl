name: Build SDL_image

on:
  workflow_dispatch:

jobs:
  determine-version:
    name: Determine Latest SDL_image Version
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.get_version.outputs.release_tag }}
      version_number: ${{ steps.get_version.outputs.version_number }}
      original_release_tag: ${{ steps.get_version.outputs.original_release_tag }}
    steps:
      - name: Get latest SDL_image release info
        id: get_version
        run: |
          ORIGINAL_RELEASE_TAG=$(gh release list --repo libsdl-org/SDL_image --limit 10 --json tagName | jq -r '([.[] | select(.tagName | startswith("release-3."))] | .[0].tagName) // empty')
          echo "Determined ORIGINAL_RELEASE_TAG: ${ORIGINAL_RELEASE_TAG}"
          if [ -z "${ORIGINAL_RELEASE_TAG}" ] || [ "${ORIGINAL_RELEASE_TAG}" == "null" ]; then
            echo "::error::Failed to determine ORIGINAL_RELEASE_TAG."
            exit 1
          fi
          echo "original_release_tag=${ORIGINAL_RELEASE_TAG}" >> $GITHUB_OUTPUT

          # Construct the new release tag for sdl3_image
          NEW_RELEASE_TAG="sdl3_image-${ORIGINAL_RELEASE_TAG}"
          echo "Constructed NEW_RELEASE_TAG: ${NEW_RELEASE_TAG}"
          echo "release_tag=${NEW_RELEASE_TAG}" >> $GITHUB_OUTPUT

          # VERSION_NUMBER is derived from the ORIGINAL_RELEASE_TAG (e.g., release-x.y.z -> x.y.z)
          VERSION_NUMBER=$(echo "${ORIGINAL_RELEASE_TAG}" | sed 's/^release-//')
          echo "Determined VERSION_NUMBER: ${VERSION_NUMBER}"
          if [ -z "${VERSION_NUMBER}" ]; then
            echo "::error::Failed to determine VERSION_NUMBER from ORIGINAL_RELEASE_TAG: ${ORIGINAL_RELEASE_TAG}."
            exit 1
          fi
          echo "version_number=${VERSION_NUMBER}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    name: Download Windows
    runs-on: ubuntu-latest
    needs: determine-version
    strategy:
      fail-fast: false
      matrix:
          arch: [x64]
    steps:
      - name: Download release build
        run: wget https://github.com/libsdl-org/SDL_image/releases/download/${{ needs.determine-version.outputs.original_release_tag }}/SDL3_image-${{ needs.determine-version.outputs.version_number }}-win32-${{ matrix.arch }}.zip
      - name: Upload Build
        uses: actions/upload-artifact@v4
        with: 
            name: sdl-image-windows-${{ matrix.arch }}
            path: SDL3_image-${{ needs.determine-version.outputs.version_number }}-win32-${{ matrix.arch }}.zip

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: determine-version
    container: registry.gitlab.steamos.cloud/steamrt/sniper/sdk:beta
    defaults:
      run:
        working-directory: SDL_image
    steps:
      - name: Set up Ninja
        uses: aseprite/get-ninja@main
      - name: Set up SDL
        uses: libsdl-org/setup-sdl@main
        id: sdl
        with:
          cmake-generator: Ninja
          version: 3-head
          shell: sh
      - name: Set up Linux dependencies
        working-directory: .
        run: |
          sudo apt-get update
          sudo apt-get -y install \
          libavif-dev \
          libjpeg-dev \
          libpng-dev \
          libtiff-dev \
          libwebp-dev \
          zlib1g-dev \
          ${NULL+}
      - name: Set up NASM
        uses: ilammy/setup-nasm@v1
      - name: Clone SDL_image
        working-directory: .
        run: git clone --recurse-submodules --branch ${{ needs.determine-version.outputs.original_release_tag }} https://github.com/libsdl-org/SDL_image.git
      - name: Check that versioning is consistent
        # We only need to run this once: arbitrarily use the Linux build
        run: ./build-scripts/test-versioning.sh
      - name: Configure
        run: >
          cmake -G Ninja
          -DBUILD_SHARED_LIBS=ON
          -DCMAKE_BUILD_TYPE=Release
          -DSDL_SHARED=ON
          -DSDL_STATIC=OFF
          -DSDL_DISABLE_INSTALL=ON
          -DSDL_DISABLE_INSTALL_DOCS=ON
          -DSDLIMAGE_TESTS=OFF
          -DSDLIMAGE_TESTS_INSTALL=OFF
          -DSDLIMAGE_SAMPLES=OFF
          -DSDLIMAGE_INSTALL_MAN=OFF
          -DSDLIMAGE_VENDORED=ON
          -S . -B build
      - name: Build
        run: cmake --build build --config Release
      - name: Package Linux library
        working-directory: SDL_image/build
        run: |
          # Assuming libSDL3_image.so.0 is the correct file
          zip "../SDL3_image-${{ needs.determine-version.outputs.version_number }}-linux-x86_64.zip" libSDL3_image.so.0
      - name: Upload Linux Build
        uses: actions/upload-artifact@v4
        with:
            name: sdl-image-linux-zip
            path: SDL_image/SDL3_image-${{ needs.determine-version.outputs.version_number }}-linux-x86_64.zip

  build-macos:
    name: Build for Apple (Universal)
    runs-on: macos-latest
    needs: determine-version
    defaults:
      run:
        working-directory: SDL_image
    steps:
      - name: Set up Ninja
        uses: aseprite/get-ninja@main
      - name: Set up SDL
        id: sdl
        uses: libsdl-org/setup-sdl@main
        with:
          cmake-generator: Ninja
          cmake-arguments: |
            -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" \
            -DSDL_DISABLE_INSTALL_DOCS=ON \
            -DSDL_INSTALL_TESTS=OFF
          version: 3-head
          shell: sh
      - name: Setup MacOS dependencies
        working-directory: .
        run: |
          brew install \
          jpeg-xl \
          libavif \
          webp \
          ${NULL+}
      - name: Set up NASM
        uses: ilammy/setup-nasm@v1
      - name: Clone SDL_image
        working-directory: .
        run: git clone --recurse-submodules --branch ${{ needs.determine-version.outputs.original_release_tag }} https://github.com/libsdl-org/SDL_image.git
      - name: Configure
        run: >
          cmake -G Ninja
          -DBUILD_SHARED_LIBS=ON
          -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
          -DCMAKE_BUILD_TYPE=Release
          -DSDL_SHARED=ON
          -DSDL_STATIC=OFF
          -DSDLIMAGE_TESTS=OFF
          -DSDLIMAGE_TESTS_INSTALL=OFF
          -DSDLIMAGE_SAMPLES=OFF
          -DSDLIMAGE_INSTALL_MAN=OFF
          -DSDLIMAGE_VENDORED=ON
          -DDAV1D_ASM=OFF
          -S . -B build
      - name: Build
        run: cmake --build build --config Release
      - name: Package macOS library
        working-directory: SDL_image/build
        run: |
          # Assuming libSDL3_image.0.dylib is the correct file and is now universal
          zip "../SDL3_image-${{ needs.determine-version.outputs.version_number }}-macos-universal.zip" libSDL3_image.0.dylib
      - name: Upload macOS Build
        uses: actions/upload-artifact@v4
        with:
            name: sdl-image-apple-macOS-universal-zip
            path: SDL_image/SDL3_image-${{ needs.determine-version.outputs.version_number }}-macos-universal.zip

  create-release:
    name: Create GitHub Release for SDL_image
    runs-on: ubuntu-latest
    needs: [determine-version, build-windows, build-linux, build-macos]
    permissions:
      contents: write # Required to create a release
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # All artifacts will be downloaded into subdirectories under 'artifacts'

      - name: List downloaded files (for debugging)
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.determine-version.outputs.release_tag }} # Use the actual release tag
          name: "SDL_image ${{ needs.determine-version.outputs.version_number }}"
          body: "Automated release for SDL_image version ${{ needs.determine-version.outputs.version_number }}, including builds for Windows, Linux, and Apple platforms."
          files: |
            artifacts/sdl-image-windows-x64/SDL3_image-${{ needs.determine-version.outputs.version_number }}-win32-x64.zip
            artifacts/sdl-image-linux-zip/*.zip
            artifacts/sdl-image-apple-macOS-universal-zip/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
