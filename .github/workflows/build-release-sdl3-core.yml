name: Build SDL Core

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'


jobs:
  determine-version:
    name: Determine Latest SDL3 Version
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.get_version.outputs.release_tag }}
      version_number: ${{ steps.get_version.outputs.version_number }}
      sdl_original_tag: ${{ steps.get_version.outputs.sdl_original_tag }}
      should_build: ${{ steps.check_release.outputs.should_build }}
    steps:
      - name: Get latest SDL3 release info
        id: get_version
        run: |
          ORIGINAL_RELEASE_TAG=$(gh release list --repo libsdl-org/SDL --limit 2 --json tagName | jq -r '[.[] | select(.tagName | startswith("release-3"))][0].tagName')
          echo "Determined ORIGINAL_RELEASE_TAG: ${ORIGINAL_RELEASE_TAG}"
          # Ensure ORIGINAL_RELEASE_TAG is not empty or null
          if [ -z "${ORIGINAL_RELEASE_TAG}" ] || [ "${ORIGINAL_RELEASE_TAG}" == "null" ]; then
            echo "::error::Failed to determine ORIGINAL_RELEASE_TAG."
            exit 1
          fi
          echo "sdl_original_tag=${ORIGINAL_RELEASE_TAG}" >> $GITHUB_OUTPUT
 
          # Construct the new release tag for sdl3-core
          NEW_RELEASE_TAG="sdl3-core-${ORIGINAL_RELEASE_TAG}"
          echo "Constructed NEW_RELEASE_TAG: ${NEW_RELEASE_TAG}"
          echo "release_tag=${NEW_RELEASE_TAG}" >> $GITHUB_OUTPUT

          # VERSION_NUMBER is derived from the ORIGINAL_RELEASE_TAG (e.g., release-x.y.z -> x.y.z)
          VERSION_NUMBER=$(echo "${ORIGINAL_RELEASE_TAG}" | sed 's/^release-//')
          echo "Determined VERSION_NUMBER: ${VERSION_NUMBER}"
          if [ -z "${VERSION_NUMBER}" ]; then
            echo "::error::Failed to determine VERSION_NUMBER from ORIGINAL_RELEASE_TAG: ${ORIGINAL_RELEASE_TAG}."
            exit 1
          fi
          echo "version_number=${VERSION_NUMBER}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if release already exists
        id: check_release
        run: |
          NEW_RELEASE_TAG="sdl3-core-$(echo ${{ steps.get_version.outputs.sdl_original_tag }})"
          if gh release view "${NEW_RELEASE_TAG}" --repo ${{ github.repository }} > /dev/null 2>&1; then
            echo "Release ${NEW_RELEASE_TAG} already exists in ${{ github.repository }}. Skipping build."
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "Release ${NEW_RELEASE_TAG} does not exist in ${{ github.repository }}. Proceeding with build."
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    name: Download Windows
    runs-on: ubuntu-latest
    needs: determine-version
    if: needs.determine-version.outputs.should_build == 'true'
    strategy:
      fail-fast: false
      matrix:
          arch: [x64]

    steps:
      - name: Download release build
        run: wget https://github.com/libsdl-org/SDL/releases/download/${{ needs.determine-version.outputs.sdl_original_tag }}/SDL3-${{ needs.determine-version.outputs.version_number }}-win32-x64.zip
      - name: Upload Build
        uses: actions/upload-artifact@v4
        with: 
            name: sdl-windows-x64
            path: SDL3-${{ needs.determine-version.outputs.version_number }}-win32-x64.zip

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: determine-version
    if: needs.determine-version.outputs.should_build == 'true'
    container: registry.gitlab.steamos.cloud/steamrt/sniper/sdk:beta
    defaults:
      run:
        working-directory: SDL
    steps:
      - name: Clone SDL3
        working-directory: .
        run: git clone --depth 1 --branch ${{ needs.determine-version.outputs.sdl_original_tag }} https://github.com/libsdl-org/SDL.git
      - name: Configure
        run: >
          cmake -G Ninja
          -DCMAKE_BUILD_TYPE=Release
          -DSDL_SHARED=ON
          -DSDL_STATIC=OFF
          -DSDL_DISABLE_INSTALL=ON
          -DSDL_DISABLE_INSTALL_DOCS=ON
          -DSDL_INSTALL_TESTS=OFF
          -S . -B build
      - name: Build
        run: cmake --build build --config Release
      - name: Package Linux library
        working-directory: SDL/build
        run: |
          # Assuming libSDL3.so.0 is the correct file, based on previous logs
          zip "../SDL3-${{ needs.determine-version.outputs.version_number }}-linux-x86_64.zip" libSDL3.so.0
      - name: Upload Linux Build
        uses: actions/upload-artifact@v4
        with:
            name: sdl-linux-zip
            path: SDL/SDL3-${{ needs.determine-version.outputs.version_number }}-linux-x86_64.zip

  build-macos:
    name: Build for Apple
    runs-on: macos-14
    needs: determine-version
    if: needs.determine-version.outputs.should_build == 'true'
    defaults:
      run:
        working-directory: SDL
    steps:
      - name: Clone SDL3
        working-directory: .
        run: git clone --depth 1 --branch ${{ needs.determine-version.outputs.sdl_original_tag }} https://github.com/libsdl-org/SDL.git
      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
            xcode-version: "16.1"
      - name: Configure
        run: >
          cmake -G "Xcode"
          -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED=NO
          -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
          -DCMAKE_BUILD_TYPE=Release
          -DSDL_SHARED=ON
          -DSDL_STATIC=OFF
          -DSDL_DISABLE_INSTALL=ON
          -DSDL_DISABLE_INSTALL_DOCS=ON
          -DSDL_INSTALL_TESTS=OFF
          -S . -B build
      - name: Build
        run: cmake --build build --config Release
      - name: Package macOS library
        working-directory: SDL/build/Release
        run: |
          # Zipping libSDL3.0.dylib, which is the universal library file
          zip "../../SDL3-${{ needs.determine-version.outputs.version_number }}-macos-universal.zip" libSDL3.0.dylib
      - name: Upload macOS Build
        uses: actions/upload-artifact@v4
        with:
            name: sdl-apple-universal-zip
            path: SDL/SDL3-${{ needs.determine-version.outputs.version_number }}-macos-universal.zip

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [determine-version, build-windows, build-linux, build-macos]
    if: needs.determine-version.outputs.should_build == 'true'
    permissions:
      contents: write # Required to create a release
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # All artifacts will be downloaded into subdirectories under 'artifacts'

      - name: List downloaded files (for debugging)
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.determine-version.outputs.release_tag }}
          name: "SDL Core ${{ needs.determine-version.outputs.version_number }}"
          body: "Automated release for SDL Core version ${{ needs.determine-version.outputs.version_number }}, including builds for Windows, Linux, and Apple platforms."
          files: |
            artifacts/sdl-windows-x64/SDL3-${{ needs.determine-version.outputs.version_number }}-win32-x64.zip
            artifacts/sdl-linux-zip/*.zip
            artifacts/sdl-apple-universal-zip/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
